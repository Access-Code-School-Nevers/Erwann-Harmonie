<!-- <?php -->

namespace App\Controller;

use App\Form\TransferType;
use App\Entity\Transfer;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Bundle\SwiftmailerBundle\Swiftmailer;
use Doctrine\ORM\EntityManagerInterface;
use ZipArchive;
// require_once '../../vendor/autoload.php';

class TransferController extends AbstractController
{
  /**
  * @Route("/", name ="transfer")
  */
  public function index(Request $request) {
    return $this->render('transfer/index.html.twig', [
    'form'=>$form->createView(),
    'controller_name' => 'TransferController'
    ]);
  }

  /**
  * @Route("/createForm")
  */
  public function createForm(Request $request){
    $transfer = new Transfer();

    $form = $this->createForm(TransferType::class, $transfer);
    $form->handleRequest($request);

    if ($form->isSubmitted() && $form->isValid()) {
      /** @var UploadedFile $userFile */
      $userFile = $form['file']->getData();

      // this condition is needed because the 'file' field is not required
      // so the PDF file must be processed only when a file is uploaded
      if ($userFile) {
        $originalFilename = pathinfo($userFile->getClientOriginalName(), PATHINFO_FILENAME);
        // this is needed to safely include the file name as part of the URL
        $safeFilename = transliterator_transliterate('Any-Latin; Latin-ASCII; [^A-Za-z0-9_] remove; Lower()', $originalFilename);
        $newFilename = $safeFilename.'-'.uniqid().'.'.$userFile->guessExtension();

        // Move the file to the directory where files are stored
        try {
            $userFile->move(
                $this->getParameter('files_directory'),
                $newFilename
            );
        } catch (FileException $e) {
            // ... handle exception if something happens during file upload
            echo $e;
        }

        // updates the 'userFilename' property to store the PDF file name
        // instead of its contents
        $transfer->setFilename($newFilename);
        // $this->send_mail($transfer, $mailer);
      }
    }
  }

  /**
  * @Route("/sendMail")
  */
  public function sendMail(Request $request, \Swift_Mailer $mailer) {
    if($this->checkEmail($request->request->get('sender')) && $this->checkEmail($request->request->get('recipient'))){
      // Create entity
      $fileTransfer = new FileTransfer();
      $fileTransfer->setMailFrom(filter_var(trim($request->request->get('sender')), FILTER_SANITIZE_EMAIL));
      $fileTransfer->setMailTo(filter_var(trim($request->request->get('recipient')), FILTER_SANITIZE_EMAIL));
      $files = $request->files->get('files');
      $nbElements = count($files);
      $tmpFiles = array();
      // Unique zip name
      $idZip = uniqid('zip_');
      $fileTransfer->setFileName($idZip);
      // Add files to images reporitory and create zip archive
      $zip = new ZipArchive;
      if ($zip->open('zip/'.$idZip.'.zip', ZipArchive::CREATE) === TRUE){
        $i=1;
        foreach($files as $file){
          $idImage = uniqid('files_');
          $name = $idImage.'.'.pathinfo($file->getClientOriginalName(),PATHINFO_EXTENSION);
          $tmpFiles[$i] = $file->move('files', $name);
          $zip->addFile('upload/'.$name, $name);
          $i++;
        }
      }
      // All files are added, so close the zip file.
      $zip->close();
      // Delete temporary file
      foreach($tmpFiles as $tmpFile){
        unlink($tmpFile);
      }


      // Create the message
      $mail = (new \Swift_Message())
        ->setSubject('Wave - ' . $fileTransfer->getSender() . ' vous a envoyÃ© des fichiers')
        ->setFrom([$fileTransfer->getSender()])
        ->setTo([$fileTransfer->getRecipient()]);

        $cid = $mail->embed(\Swift_Image::fromPath('images/spouting-whale.png'));
        $mail->setBody(
          $this->renderView('transfer/email.html.twig', [
            'recipientName' => $fileTransfer->getRecipient(),
            'sender' => $fileTransfer->getSender(),
            'link' => 'zip/'.$fileTransfer->getFileName().'.zip',
            'logo' => $cid
          ]),
          'text/html'
        );

        $mailer->send($mail);

          // Insert into DB
          $transferRepo = $this->getDoctrine()->getManager();
          $transferRepo->persist($fileTransfer);
          $transferRepo->flush();
          return $this->json(['response' => '1', 'link' => '/zip/'.$idZip.'.zip']);
      }
      // Error
      else {
        return $this->json(['response' => '0']);
      }
  }

  public function checkEmail($email) {
    $find1 = strpos($email, '@');
    $find2 = strpos($email, '.');
    return ($find1 !== false && $find2 !== false);
  }
}
